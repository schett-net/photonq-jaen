{"version":3,"file":"component---src-pages-reset-tsx-27010b8a0e6021943ac1.js","mappings":"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","sources":["webpack://my-gatsby-site/./src/components/Authentification/PasswordResetForm.tsx","webpack://my-gatsby-site/./src/pages/reset.tsx"],"sourcesContent":["import {Field} from '@jaenjs/jaen'\nimport {Alert, Snackbar, TextField} from '@mui/material'\nimport {red} from '@mui/material/colors'\nimport {Link} from 'gatsby'\nimport React, {useState} from 'react'\nimport {useTranslation} from 'react-i18next'\n\nimport {resetPassword} from '@snek-functions/origin'\n\nimport {Path} from '../../model/model.routes'\nimport LoadingButton from '../LoadingButton'\nimport AuthFormContainer from './AuthFormContainer'\nimport PasswordField from './PasswordField'\n\ninterface PasswordResetValues {\n  password: string\n  passwordConfirmation: string\n}\n\ninterface PasswordResetRequestValues {\n  email: string\n}\n\nconst getResetTokenFromWindowLocation = (): string | null => {\n  if (typeof window === 'undefined') {\n    return null\n  }\n\n  // get the token from the window location query string\n  const searchParams = new URLSearchParams(window.location.search)\n  const token = searchParams.get('token')\n\n  return token\n}\n\nexport default function PasswordResetForm() {\n  const {t} = useTranslation()\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState('')\n  const [toastOpen, setToastOpen] = React.useState(false)\n  const [passwordResetValues, setPasswordResetValues] =\n    useState<PasswordResetValues>({\n      password: '',\n      passwordConfirmation: ''\n    })\n\n  const [passwordResetRequestValues, setPasswordResetRequestValues] =\n    useState<PasswordResetRequestValues>({\n      email: ''\n    })\n\n  // If the token is present in the window location, we are in the reset step.\n  // Otherwise, we are in the request step.\n  const [resetToken, setResetToken] = useState(\n    getResetTokenFromWindowLocation()\n  )\n\n  React.useEffect(() => {\n    setResetToken(getResetTokenFromWindowLocation())\n  }, [window.location])\n\n  const handleResetOnChange = (\n    e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n    key: keyof PasswordResetValues\n  ) => {\n    setPasswordResetValues(prev => ({...prev, [key]: e.target.value}))\n  }\n\n  const handleResetRequestOnChange = (\n    e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n    key: keyof PasswordResetRequestValues\n  ) => {\n    setPasswordResetRequestValues(prev => ({...prev, [key]: e.target.value}))\n  }\n\n  const reset = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n    setIsLoading(true)\n    try {\n      setError('')\n\n      if (resetToken === null) {\n        await resetPassword({\n          email: passwordResetRequestValues.email\n        })\n        setToastOpen(true)\n      } else {\n        if (\n          passwordResetValues.password ===\n          passwordResetValues.passwordConfirmation\n        ) {\n          const res = await fetch(\n            `https://photonq.at/submit?token=${resetToken}`,\n            {\n              method: 'POST',\n              body: JSON.stringify({\n                password: passwordResetValues.password\n              })\n            }\n          )\n\n          if (!res.ok) {\n            throw new Error('Something went wrong')\n          }\n        } else {\n          throw new Error('Passwords do not match')\n        }\n      }\n    } catch (e) {\n      setError(e.message)\n    } finally {\n      setIsLoading(() => false)\n    }\n  }\n\n  return (\n    <>\n      <AuthFormContainer\n        header={<Field.Text name=\"reset\" defaultValue=\"Reset password\" />}\n        onSubmit={e => reset(e)}>\n        {resetToken === null ? (\n          <>\n            <Field.Text\n              name=\"resetRequest\"\n              defaultValue=\"Reset your password by entering your email address below. You will\n            receive an email with a link to reset your password.\"\n            />\n\n            <TextField\n              value={passwordResetRequestValues.email}\n              onChange={e => handleResetRequestOnChange(e, 'email')}\n              fullWidth\n              required\n              variant={'outlined'}\n              type={'email'}\n              label={t('Email Address')}\n            />\n          </>\n        ) : (\n          <>\n            <PasswordField\n              value={passwordResetValues.password}\n              handleOnChange={e => handleResetOnChange(e, 'password')}\n              required\n              fullWidth\n              label={'Password *'}\n            />\n            <PasswordField\n              value={passwordResetValues.passwordConfirmation}\n              handleOnChange={e =>\n                handleResetOnChange(e, 'passwordConfirmation')\n              }\n              required\n              fullWidth\n              label={'Confirm Password *'}\n            />\n          </>\n        )}\n\n        <LoadingButton\n          text={t('Reset password')}\n          isLoading={isLoading}\n          fullWidth\n          variant={'contained'}\n          type={'submit'}\n        />\n        {error.length ? (\n          <div style={{color: red.A700}} className={'flex justify-center'}>\n            *{t(error)}\n          </div>\n        ) : null}\n        <div className={'flex justify-center'}>\n          <div\n            className={\n              'flex space-x-5 underline cursor-pointer text-primary duration-300'\n            }>\n            <Link to={Path.Login}>\n              <p className=\"transform hover:-translate-y-1\">\n                {t('Back to login')}\n              </p>\n            </Link>\n          </div>\n        </div>\n      </AuthFormContainer>\n      <Snackbar open={toastOpen} autoHideDuration={2000}>\n        <Alert variant=\"filled\" severity=\"success\" sx={{width: '100%'}}>\n          Reset password email sent! Please check your inbox.\n        </Alert>\n      </Snackbar>\n    </>\n  )\n}\n","import {connectPage, Field} from '@jaenjs/jaen'\nimport {Grid} from '@mui/material'\nimport {graphql, PageProps} from 'gatsby'\nimport React from 'react'\n\nimport AuthContent from '../components/Authentification/AuthContent'\nimport PasswordResetForm from '../components/Authentification/PasswordResetForm'\nimport AuthPageLayout from '../components/Layout/AuthPageLayout'\nimport NavbarPadding from '../components/Layout/NavbarPadding'\nimport PageLayout from '../components/Layout/PageLayout'\n\nexport function ResetPage(props: PageProps) {\n  return (\n    <PageLayout pathname={props.path}>\n      <AuthPageLayout>\n        <div className={'2xl:hidden'}>\n          <NavbarPadding />\n        </div>\n        <Grid container columnSpacing={12}>\n          <Grid item md={7}>\n            <div\n              className={\n                'pt-8 md:pt-0 md:h-screen flex flex-col justify-center'\n              }>\n              <PasswordResetForm />\n            </div>\n          </Grid>\n          <Grid item md={5}>\n            <AuthContent\n              header={\n                <Field.Text\n                  name=\"header\"\n                  defaultValue=\"Start quantum computing with us!\"\n                />\n              }\n              content={\n                <Field.Text\n                  name=\"content\"\n                  defaultValue=\"Our intuitive approach makes it easy for beginners to start with quantum computing and allows experts and educators to run complex photonic experiments on real quantum hardware.\"\n                />\n              }\n            />\n          </Grid>\n        </Grid>\n      </AuthPageLayout>\n    </PageLayout>\n  )\n}\n\nexport const query = graphql`\n  query ($jaenPageId: String!) {\n    ...JaenPageQuery\n  }\n`\n\nexport default connectPage(ResetPage, {displayName: 'ResetPage'})\n"],"names":["getResetTokenFromWindowLocation","window","URLSearchParams","location","search","get","PasswordResetForm","t","useTranslation","useState","isLoading","setIsLoading","error","setError","React","toastOpen","setToastOpen","password","passwordConfirmation","passwordResetValues","setPasswordResetValues","email","passwordResetRequestValues","setPasswordResetRequestValues","resetToken","setResetToken","handleResetOnChange","e","key","prev","target","value","reset","preventDefault","_context","resetPassword","fetch","method","body","JSON","stringify","ok","Error","message","_jsxs","AuthFormContainer","header","_jsx","Field","name","defaultValue","onSubmit","TextField","onChange","handleResetRequestOnChange","fullWidth","required","variant","type","label","PasswordField","handleOnChange","LoadingButton","text","length","style","color","red","className","Link","to","Path","Snackbar","open","autoHideDuration","Alert","severity","sx","width","ResetPage","props","PageLayout","pathname","path","children","AuthPageLayout","NavbarPadding","Grid","container","columnSpacing","item","md","AuthContent","content","connectPage","displayName"],"sourceRoot":""}